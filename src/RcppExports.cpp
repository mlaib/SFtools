// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// colMin
NumericVector colMin(NumericMatrix X);
RcppExport SEXP SFtools_colMin(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colMin(X));
    return rcpp_result_gen;
END_RCPP
}
// measr_cpp
double measr_cpp(NumericMatrix x);
RcppExport SEXP SFtools_measr_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(measr_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// measr_ff
NumericMatrix measr_ff(NumericMatrix x);
RcppExport SEXP SFtools_measr_ff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(measr_ff(x));
    return rcpp_result_gen;
END_RCPP
}
// CPP_get_openmp_threads
DataFrame CPP_get_openmp_threads();
RcppExport SEXP SFtools_CPP_get_openmp_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(CPP_get_openmp_threads());
    return rcpp_result_gen;
END_RCPP
}
// CPP_set_openmp_threads
void CPP_set_openmp_threads(int n);
RcppExport SEXP SFtools_CPP_set_openmp_threads(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    CPP_set_openmp_threads(n);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"SFtools_colMin", (DL_FUNC) &SFtools_colMin, 1},
    {"SFtools_measr_cpp", (DL_FUNC) &SFtools_measr_cpp, 1},
    {"SFtools_measr_ff", (DL_FUNC) &SFtools_measr_ff, 1},
    {"SFtools_CPP_get_openmp_threads", (DL_FUNC) &SFtools_CPP_get_openmp_threads, 0},
    {"SFtools_CPP_set_openmp_threads", (DL_FUNC) &SFtools_CPP_set_openmp_threads, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SFtools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
